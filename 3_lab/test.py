import unittest
from axe import Axe
from swords_bonus import SwordBonus
# клас для тестування повинен починатися зі слова Test
class TestSwordBonus(unittest.TestCase):
    # В даному класі реаліуються всі юніттести у вигляді методів
    # кожен юніттест (назва ф-кції) повинен починатись з префікса імені "test_"
    # оскільки ми працюємо в класі, ми працюємо з методами, і маємо вказівник на об'єкт self, 
    # який містить весь функціонал батьківського класу TestCase, з якого ми будемо використовувати перевірки assert

    def test_bonus_poison(self):
        """Тестуємо правильність накладення бафу отрути"""
        sw = Axe() # створений макет на який можемо накласти баф отрутити 
        sb = SwordBonus() # імплементація бонусів

        d = sw.damag # тут ми фіксуємо початкове значення нанесення шкоди 
        result = sb.bonus_poison(sw) # після накладення бонусу наш метод має повернути результат
        # нам відомий результат, що повертається, тому ми просто перевіряємо чи він буде рівний
        self.assertEqual(result, f"Застосовано бонус отрути {sw.name}")
        # після накладення бафу отрути наш damage має збільшитись, тому перевіряємо, 
        # що поточне значення шкоди має бути більшим за початкове
        self.assertGreater(sw.damag, d, "Накладений бонус отрути не збільшив значення шкоди.")

    def test_bonus_strength(self):
        """Тестуємо накладання бафу міцності"""
        sw = Axe() # створений макет на який можемо накласти баф отрутити 
        sb = SwordBonus() # імплементація бонусів

        v = sw.vitality # тут ми фіксуємо початкове значення міцності
        result = sb.bonus_strength(sw)
        self.assertEqual(result, f"Застосовано бонус сили до {sw.name}")
        self.assertGreater(sw.vitality, v, "Накладений бонус міцності не збільшив значення витриваності.")
        # Якщо ми передали неправильний об'єкт,до якого не можна накласти баф,то нам просто повертається None
        self.assertIsNone(sb.bonus_strength(1), "До цього об'єкта не можна застосовувати накладення бафів, неправильним об'єкт")

    # def test_split(self):
    #     s = ''
    #     self.assertEqual(s.split(), ['hello', 'world'])
    #     #
    #     with self.assertRaises(TypeError):
    #         s.split(2)

# Ця конструкція if не дозволить запустити цей код, якщо ми імпортнемо в інший файл
if __name__ == '__main__':
    unittest.main(verbosity=2)